<?xml version="1.0" encoding="UTF-8"?>
<cofluent:Application xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cofluent="http://cofluent.intel.com/cofluent/1.0.0" xmi:id="_UsFT4B3VEeaquPXHm3CdXA" name="ApplicationModelRefinement" postSimulation="if(TotalNbMsg!=0)&#xD;&#xA;{&#xD;&#xA;&#x9;cf_trace_report(&quot;Total number of messages : %i&quot;, TotalNbMsg);&#xD;&#xA;&#x9;cf_trace_report(&quot;Average data size : %f bytes&quot;, (float)TotalDataSize.to_scalar(CF_BYTE)/(float)TotalNbMsg);&#xD;&#xA;&#x9;cf_trace_report(&quot;AverageLatency = %f ns&quot;, (float)AverageLatency.to_scalar(CF_NS)/(float)TotalNbMsg );&#xD;&#xA;&#x9;AverageThroughput= cf_dt::cf_throughput(TotalDataSize, AverageLatency);&#xD;&#xA;&#x9;cf_trace_report(&quot;AverageThroughput = %f MBps&quot;, (float)AverageThroughput.to_scalar(CF_MBYPS)/(float)TotalNbMsg);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;cf_trace_gui_f_param(&quot;AverageLatency&quot;, (float)AverageLatency.to_scalar(CF_NS)/(float)TotalNbMsg );&#xD;&#xA;cf_trace_gui_f_param(&quot;AverageThroughput&quot;, (float)AverageThroughput.to_scalar(CF_MBYPS)/(float)TotalNbMsg);" version="6.2.0_dev4_20160518-1508" declarations="" preElaboration="" cyclePeriod="10 ns" affinity="0" priority="1" schedulingPolicy="FIFO" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" preSimulation="" postElaboration="" globalTypeDeclarations="#include &quot;ExternalFile.h&quot;&#xD;&#xA;&#xD;&#xA;typedef cf_dt::cf_time DefStartTime;&#xD;&#xA;typedef cf_dt::cf_data_size DefDataSize;&#xD;&#xA;typedef float DefValue; &#xD;&#xA;&#xD;&#xA;// Using a common type for all data exchanges &#xD;&#xA;typedef struct{&#xD;&#xA;&#x9;DefStartTime StartTime;&#xD;&#xA;&#x9;DefDataSize DataSize;&#xD;&#xA;&#x9;DefValue Value;&#xD;&#xA;} DefData;" globalDeclarations="extern int TotalNbMsg;&#xD;&#xA;extern cf_dt::cf_data_size TotalDataSize;&#xD;&#xA;extern cf_dt::cf_time AverageLatency;&#xD;&#xA;extern cf_dt::cf_throughput AverageThroughput;" globalDefinitions="int TotalNbMsg=0;&#xD;&#xA;cf_dt::cf_data_size TotalDataSize(0, CF_BYTE );&#xD;&#xA;cf_dt::cf_time AverageLatency(0.0, CF_NS);&#xD;&#xA;cf_dt::cf_throughput AverageThroughput(0.0, CF_MBYPS);">
  <annotations xmi:id="_etiQwCGxEeaaOsqBPt_qWw" source="cdt.configurations">
    <details xmi:id="_AskCoHH6EeeJVqe6rKhyIg" key="cofluent.managedbuild.config.gnu.mingw.exe.release.1196624148" value="cdt.configuration.active"/>
    <details xmi:id="_gDEfIPKAEeqmSNOakke98w" key="cofluent.managedbuild.config.gnu.mingw492.exe.release.1354791674" value="cdt.configuration.active"/>
  </annotations>
  <designParameters xsi:type="cofluent:RangeParameter" xmi:id="_-ZKcYCGuEeaaOsqBPt_qWw" name="DataSize" documentation="Size of data" default="200" visibility="PUBLIC" accessRight="READ_ONLY" value="200" type="INTEGER" min="200" max="500" step="50"/>
  <designParameters xsi:type="cofluent:RangeParameter" xmi:id="_-ZKcYSGuEeaaOsqBPt_qWw" name="ErrorRate" documentation="Error rate (%)" default="0" visibility="PUBLIC" accessRight="READ_ONLY" value="0" type="INTEGER" min="0" max="20" step="5"/>
  <designParameters xsi:type="cofluent:RangeParameter" xmi:id="_-ZKcYiGuEeaaOsqBPt_qWw" name="NoiseLevel" documentation="Noise added to signal" default="0" visibility="PUBLIC" accessRight="READ_ONLY" value="0" type="INTEGER" min="0" max="1000" step="100"/>
  <designParameters xsi:type="cofluent:RangeParameter" xmi:id="_dgOH4PKAEeqmSNOakke98w" name="Frequency" documentation="Frequency of signal" default="0.5" visibility="PUBLIC" accessRight="READ_ONLY" value="0.5" internalUnit="HZ" type="DECIMAL" min="0.1" max="1.0" step="0.1"/>
  <refinement xsi:type="cofluent:Structure" xmi:id="_UsFT8B3VEeaquPXHm3CdXA" name="ApplicationModelRefinementSt">
    <models xsi:type="cofluent:Function" xmi:id="_OgPxgCGrEeaaOsqBPt_qWw" name="Producer" includes="" cyclePeriod=" ns" affinity="0" priority="1" schedulingPolicy="FIFO" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100">
      <ports xmi:id="_W1JfkCGuEeaaOsqBPt_qWw" name="Msg" type="MESSAGE_QUEUE" direction="OUT" relations="_HoRFuSGuEeaaOsqBPt_qWw" ports="_U8HoxCGrEeaaOsqBPt_qWw" size="" synchronizeName="true" vector="false" requestPipelineDepth="1"/>
      <ports xmi:id="_XKfdcCGuEeaaOsqBPt_qWw" name="Ack" type="MESSAGE_QUEUE" direction="IN" relations="_HoOpcCGuEeaaOsqBPt_qWw" ports="_U8HoxSGrEeaaOsqBPt_qWw" size="" synchronizeName="true" vector="false" requestPipelineDepth="1"/>
      <refinement xsi:type="cofluent:Structure" xmi:id="_U7-e0CGrEeaaOsqBPt_qWw" name="ProducerSt">
        <models xsi:type="cofluent:Function" xmi:id="_U8HowCGrEeaaOsqBPt_qWw" name="Sender" constructor="" includes="" destructor="" declarations="int r;&#xD;&#xA;// Loop condition declaration&#xD;&#xA;bool Resend;" definitions="" preElaboration="" initializations="r = 0;" cyclePeriod=" ns" affinity="1" priority="1" schedulingPolicy="FIFO" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100">
          <ports xmi:id="_U8HowyGrEeaaOsqBPt_qWw" name="Req" type="EVENT" direction="IN" inputActions="_U8Ho0iGrEeaaOsqBPt_qWw" relations="_U8FzkCGrEeaaOsqBPt_qWw" synchronizeName="true" vector="false"/>
          <ports xmi:id="_U8HoxCGrEeaaOsqBPt_qWw" name="Msg" type="MESSAGE_QUEUE" direction="OUT" outputActions="_U8Ho9iGrEeaaOsqBPt_qWw" port="_W1JfkCGuEeaaOsqBPt_qWw" synchronizeName="true" vector="false"/>
          <ports xmi:id="_U8HoxSGrEeaaOsqBPt_qWw" name="Ack" type="MESSAGE_QUEUE" direction="IN" inputActions="_U8Ho6iGrEeaaOsqBPt_qWw" port="_XKfdcCGuEeaaOsqBPt_qWw" synchronizeName="true" vector="false"/>
          <ports xmi:id="_U8HoxiGrEeaaOsqBPt_qWw" name="DataVar" type="SHARED_VARIABLE" direction="IN" inputActions="_U8Ho3iGrEeaaOsqBPt_qWw" relations="_U8FzniGrEeaaOsqBPt_qWw" synchronizeName="true" vector="false"/>
          <refinement xsi:type="cofluent:Behavior" xmi:id="_U8HoxyGrEeaaOsqBPt_qWw" name="SenderBh" firstStatement="_U8Ho0SGrEeaaOsqBPt_qWw">
            <statements xsi:type="cofluent:Operation" xmi:id="_U8HoyCGrEeaaOsqBPt_qWw" name="OpEncode" previous="_U8Ho3iGrEeaaOsqBPt_qWw" next="_tnOB0CGxEeaaOsqBPt_qWw" algorithm="&#x9;r = ( r * 11 + 37)%DataSize;&#xA;&#x9;cf_data_size ds((cf_dt::cf_data_size_st)r, CF_BYTE);&#xA;&#x9;Msg_trans.set_user_data_length( ds);&#xA;&#x9;Msg_trans.set_time_stamp(cf_time_stamp());&#xA;&#x9;Msg.DataSize = Msg_trans.get_user_data_length();&#xA;&#x9;Msg.StartTime = Msg_trans.get_time_stamp();&#xA;&#x9;Msg.Value = DataVar;&#xA;&#x9;Resend = true; // To enter the loop" executionTime="10 ns" dynamicDataSize="2 kB" dynamicPowerConsumption="1 uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:LoopStatement" xmi:id="_U8Ho0SGrEeaaOsqBPt_qWw" name="Loop" isFirstOf="_U8HoxyGrEeaaOsqBPt_qWw" firstStatement="_U8Ho0iGrEeaaOsqBPt_qWw" lastStatement="_tnOB0CGxEeaaOsqBPt_qWw"/>
            <statements xsi:type="cofluent:InputAction" xmi:id="_U8Ho0iGrEeaaOsqBPt_qWw" name="InAction" isFirstOf="_U8Ho0SGrEeaaOsqBPt_qWw" next="_U8Ho3iGrEeaaOsqBPt_qWw" port="_U8HowyGrEeaaOsqBPt_qWw" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
            <statements xsi:type="cofluent:InputAction" xmi:id="_U8Ho3iGrEeaaOsqBPt_qWw" name="InAction2" previous="_U8Ho0iGrEeaaOsqBPt_qWw" next="_U8HoyCGrEeaaOsqBPt_qWw" port="_U8HoxiGrEeaaOsqBPt_qWw" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
            <statements xsi:type="cofluent:InputAction" xmi:id="_U8Ho6iGrEeaaOsqBPt_qWw" name="InAction3" previous="_U8Ho9iGrEeaaOsqBPt_qWw" next="_0KYM0CGxEeaaOsqBPt_qWw" port="_U8HoxSGrEeaaOsqBPt_qWw" timeout="40 ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
            <statements xsi:type="cofluent:OutputAction" xmi:id="_U8Ho9iGrEeaaOsqBPt_qWw" name="OutAction" isFirstOf="_tnOB0CGxEeaaOsqBPt_qWw" next="_U8Ho6iGrEeaaOsqBPt_qWw" port="_U8HoxCGrEeaaOsqBPt_qWw" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
            <statements xsi:type="cofluent:LoopStatement" xmi:id="_tnOB0CGxEeaaOsqBPt_qWw" name="Loop2" isLastOf="_U8Ho0SGrEeaaOsqBPt_qWw" firstStatement="_U8Ho9iGrEeaaOsqBPt_qWw" lastStatement="_0KYM0CGxEeaaOsqBPt_qWw" previous="_U8HoyCGrEeaaOsqBPt_qWw" condition="Resend" type="CONDITIONAL"/>
            <statements xsi:type="cofluent:Operation" xmi:id="_0KYM0CGxEeaaOsqBPt_qWw" name="OpTestResend" isLastOf="_tnOB0CGxEeaaOsqBPt_qWw" previous="_U8Ho6iGrEeaaOsqBPt_qWw" algorithm="&#x9;if (InAction3_has_timed_out)&#xA;  &#x9;&#x9;cf_trace_report(&quot;Timeout!&quot;);&#xA;&#xA;&#x9;Resend = InAction3_has_timed_out || Ack;" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
          </refinement>
        </models>
        <models xsi:type="cofluent:Function" xmi:id="_xh5WYSGrEeaaOsqBPt_qWw" name="Generator" cyclePeriod=" ns" affinity="0" priority="1" schedulingPolicy="FIFO" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100">
          <parameterReferences xmi:id="_gLxpACG0EeaaOsqBPt_qWw" value="0.5">
            <designParameter xsi:type="cofluent:RangeParameter" href="reuse://_xhZAECGrEeaaOsqBPt_qWw/Tutorial/Tutorial/models/ApplicationModel.cf_app#_Ni9nEB0PEeaquPXHm3CdXA"/>
          </parameterReferences>
          <ports xmi:id="_xh5WYiGrEeaaOsqBPt_qWw" name="Req" type="EVENT" direction="OUT" relations="_U8FzkCGrEeaaOsqBPt_qWw" synchronizeName="true" vector="false">
            <reuse href="reuse://_xhZAECGrEeaaOsqBPt_qWw/Tutorial/Tutorial/models/ApplicationModel.cf_app#_baqE6BkYEealL-5xWZDvNw"/>
          </ports>
          <ports xmi:id="_xh5WYyGrEeaaOsqBPt_qWw" name="DataVar" type="SHARED_VARIABLE" direction="OUT" relations="_U8FzniGrEeaaOsqBPt_qWw" synchronizeName="true" vector="false">
            <reuse href="reuse://_xhZAECGrEeaaOsqBPt_qWw/Tutorial/Tutorial/models/ApplicationModel.cf_app#_baqr8BkYEealL-5xWZDvNw"/>
          </ports>
          <ports xmi:id="_xh59cCGrEeaaOsqBPt_qWw" name="TestProd" type="SHARED_VARIABLE" direction="OUT" relations="_U8FMiSGrEeaaOsqBPt_qWw" synchronizeName="true" vector="false">
            <reuse href="reuse://_xhZAECGrEeaaOsqBPt_qWw/Tutorial/Tutorial/models/ApplicationModel.cf_app#_baqr8RkYEealL-5xWZDvNw"/>
          </ports>
          <reuse xsi:type="cofluent:Function" href="reuse://_xhZAECGrEeaaOsqBPt_qWw/Tutorial/Tutorial/models/ApplicationModel.cf_app#_baqE5hkYEealL-5xWZDvNw"/>
        </models>
        <relations xsi:type="cofluent:SharedVariable" xmi:id="_U8FMiSGrEeaaOsqBPt_qWw" name="TestProd" ports="_xh59cCGrEeaaOsqBPt_qWw" concurrency="1" counter="1" writeTime="1 ns" readTime="1 ns">
          <relationType xsi:type="cofluent:RelationDataType" xmi:id="__SCv4FzFEee79ojEzVGoCg">
            <dataType href="reuse://_mFwi6CGuEeaaOsqBPt_qWw/Tutorial/Tutorial/models/ApplicationModelDataTypes.cf_dt#_mFrDUCGuEeaaOsqBPt_qWw"/>
          </relationType>
        </relations>
        <relations xsi:type="cofluent:Event" xmi:id="_U8FzkCGrEeaaOsqBPt_qWw" name="Req" ports="_xh5WYiGrEeaaOsqBPt_qWw _U8HowyGrEeaaOsqBPt_qWw" setTime="1 ns" getTime="1 ns"/>
        <relations xsi:type="cofluent:SharedVariable" xmi:id="_U8FzniGrEeaaOsqBPt_qWw" name="DataVar" ports="_xh5WYyGrEeaaOsqBPt_qWw _U8HoxiGrEeaaOsqBPt_qWw" concurrency="1" counter="1" writeTime="1 ns" readTime="1 ns">
          <relationType xsi:type="cofluent:RelationDataType" xmi:id="__Qw9gFzFEee79ojEzVGoCg">
            <dataType href="reuse://_mFwi6CGuEeaaOsqBPt_qWw/Tutorial/Tutorial/models/ApplicationModelDataTypes.cf_dt#_mFqcQiGuEeaaOsqBPt_qWw"/>
          </relationType>
        </relations>
      </refinement>
    </models>
    <models xsi:type="cofluent:Function" xmi:id="_HoP3kCGuEeaaOsqBPt_qWw" name="Receiver" includes="" destructor="" declarations="DefValue noise;&#xD;&#xA;DefValue TestCons; &#xD;&#xA;int DecodeTime; &#xD;&#xA;int errorGen;&#xD;&#xA;bool Error; // OR branch condition&#xD;&#xA;cf_dt::cf_time Latency;&#xD;&#xA;cf_dt::cf_throughput Throughput;" definitions="" preElaboration="" initializations="DecodeTime = 0;" cyclePeriod=" ns" affinity="0" priority="1" schedulingPolicy="FIFO" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100">
      <ports xmi:id="_HoP3kiGuEeaaOsqBPt_qWw" name="Ack" type="MESSAGE_QUEUE" direction="OUT" outputActions="_HoP3rCGuEeaaOsqBPt_qWw" relations="_HoOpcCGuEeaaOsqBPt_qWw" synchronizeName="true" vector="false"/>
      <ports xmi:id="_HoP3kyGuEeaaOsqBPt_qWw" name="Msg" type="MESSAGE_QUEUE" direction="IN" inputActions="_HoP3oCGuEeaaOsqBPt_qWw" relations="_HoRFuSGuEeaaOsqBPt_qWw" synchronizeName="true" vector="false"/>
      <refinement xsi:type="cofluent:Behavior" xmi:id="_HoP3lCGuEeaaOsqBPt_qWw" name="ReceiverBh" firstStatement="_HoP3lSGuEeaaOsqBPt_qWw">
        <statements xsi:type="cofluent:Operation" xmi:id="_HoP3lSGuEeaaOsqBPt_qWw" name="OpInit" isFirstOf="_HoP3lCGuEeaaOsqBPt_qWw" next="_HoP3niGuEeaaOsqBPt_qWw" algorithm="&#x9;noise = 0.0;&#xA;&#x9;Error = false;&#xA;&#x9;errorGen = 1;&#xA;&#x9;TestCons = 0.0;&#xA;&#x9;// TestCons value is round down using floor C++ API&#xA;&#x9;cf_trace_gui_f_t(&quot;TestCons&quot;, floor(TestCons));" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
        <statements xsi:type="cofluent:LoopStatement" xmi:id="_HoP3niGuEeaaOsqBPt_qWw" name="Loop" firstStatement="_HoP3oCGuEeaaOsqBPt_qWw" lastStatement="_OWPcwCGyEeaaOsqBPt_qWw" previous="_HoP3lSGuEeaaOsqBPt_qWw" condition=""/>
        <statements xsi:type="cofluent:InputAction" xmi:id="_HoP3oCGuEeaaOsqBPt_qWw" name="InAction" isFirstOf="_HoP3niGuEeaaOsqBPt_qWw" next="_HoP3tyGuEeaaOsqBPt_qWw" port="_HoP3kyGuEeaaOsqBPt_qWw" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
        <statements xsi:type="cofluent:OutputAction" xmi:id="_HoP3rCGuEeaaOsqBPt_qWw" name="OutAction" isFirstOf="_QrbygCGyEeaaOsqBPt_qWw" isLastOf="_QrbygCGyEeaaOsqBPt_qWw" port="_HoP3kiGuEeaaOsqBPt_qWw" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
        <statements xsi:type="cofluent:Operation" xmi:id="_HoP3tyGuEeaaOsqBPt_qWw" name="OpDecode" previous="_HoP3oCGuEeaaOsqBPt_qWw" next="_OWPcwCGyEeaaOsqBPt_qWw" algorithm="&#x9;// Adds noise to signal&#xA;&#x9;double t = cf_time_stamp().to_scalar();&#xA;&#x9;noise = (DefValue)(NoiseLevel * sin(0.25 * 3.14 * NoiseLevel * t)) ;&#xA;&#xA;&#x9;// TestCons = Msg.Value + noise;&#xA;&#x9;TestCons = Add(Msg.Value, noise);&#xA;&#x9;// TestCons value is round down using floor C++ API&#xA;&#x9;cf_trace_gui_f_t(&quot;TestCons&quot;, floor(TestCons));&#xA;&#xA;&#x9;Latency = cf_time_stamp() - Msg.StartTime;&#xA;&#x9;AverageLatency+=Latency;&#xA;  &#x9;&#xA;&#x9;// Error generation&#xA;&#x9;errorGen = (errorGen * 37 + 11)%101;&#xA;&#x9;if (errorGen &lt; ErrorRate)&#xA;&#x9;{&#xA;&#x9;&#x9;Error = true;&#xA;  &#x9;&#x9;cf_trace_report(&quot;Error!&quot;);&#xA;&#x9;} &#xA;&#x9;else &#xA;&#x9;{&#xA;  &#x9;&#x9;Error = false;&#xA;  &#x9;&#x9;TotalNbMsg++;&#xA;  &#x9;&#x9;TotalDataSize+=Msg.DataSize;&#xA;  &#x9;&#x9;cf_trace_gui_f_t(&quot;Latency&quot;,(int)(Latency.to_scalar(CF_NS)),&quot;ns&quot;);&#xA;  &#x9;&#x9;cf_trace_gui_f_t(&quot;Throughput&quot;,(int)(Throughput.to_scalar(CF_MBYPS)),&quot;MBps&quot;);&#xA;  &#x9;&#x9;cf_trace_gui_f_x(&quot;Msg&quot;,&quot;Latency&quot;, TotalNbMsg, (int)(Latency.to_scalar(CF_NS)),&quot;&quot;, &quot;ns&quot;);&#xA;&#x9;}&#xA;&#xA;&#x9;Ack = Error;&#xA;&#x9;Throughput = cf_throughput(Msg.DataSize, Latency);&#xA;&#x9;DecodeTime = (DecodeTime * 11 + 37 )%101;" executionTime="DecodeTime ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
        <statements xsi:type="cofluent:AlternativeStatement" xmi:id="_OWPcwCGyEeaaOsqBPt_qWw" name="Alternative" isLastOf="_HoP3niGuEeaaOsqBPt_qWw" previous="_HoP3tyGuEeaaOsqBPt_qWw">
          <conditionalBranches xmi:id="_QrbygCGyEeaaOsqBPt_qWw" name="Branch" firstStatement="_HoP3rCGuEeaaOsqBPt_qWw" lastStatement="_HoP3rCGuEeaaOsqBPt_qWw" condition=""/>
          <conditionalBranches xmi:id="_RIJjsCGyEeaaOsqBPt_qWw" name="Branch2" isFirstOf="_RIJjsCGyEeaaOsqBPt_qWw" isLastOf="_RIJjsCGyEeaaOsqBPt_qWw" firstStatement="_RIJjsCGyEeaaOsqBPt_qWw" lastStatement="_RIJjsCGyEeaaOsqBPt_qWw" condition="Error"/>
        </statements>
      </refinement>
    </models>
    <relations xsi:type="cofluent:MessageQueue" xmi:id="_HoOpcCGuEeaaOsqBPt_qWw" name="Ack" ports="_XKfdcCGuEeaaOsqBPt_qWw _HoP3kiGuEeaaOsqBPt_qWw" capacity="1" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
      <relationType xsi:type="cofluent:RelationDataType" xmi:id="__RWMUFzFEee79ojEzVGoCg">
        <dataType href="reuse://_mFwi6CGuEeaaOsqBPt_qWw/Tutorial/Tutorial/models/ApplicationModelDataTypes.cf_dt#_mFqcQCGuEeaaOsqBPt_qWw"/>
      </relationType>
    </relations>
    <relations xsi:type="cofluent:MessageQueue" xmi:id="_HoRFuSGuEeaaOsqBPt_qWw" name="Msg" ports="_HoP3kyGuEeaaOsqBPt_qWw _W1JfkCGuEeaaOsqBPt_qWw" capacity="1" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
      <relationType xsi:type="cofluent:RelationDataType" xmi:id="__SO9IFzFEee79ojEzVGoCg">
        <dataType href="reuse://_mFwi6CGuEeaaOsqBPt_qWw/Tutorial/Tutorial/models/ApplicationModelDataTypes.cf_dt#_mFqcRSGuEeaaOsqBPt_qWw"/>
      </relationType>
    </relations>
  </refinement>
</cofluent:Application>
